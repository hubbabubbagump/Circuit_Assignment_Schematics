library IEEE;

use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPY8 is
	port( clk, mpy : in std_logic;
		  a, b : in std_logic_vector (7 downto 0);
		  prod : out std_logic_vector (15 downto 0);
		  rdy : out std_logic);
end MPY8;

architecture behav of MPY8 is
type state is (WT, S1, S2, S3, S4, S5, S6, S7); --state type declerations
signal new_state: state; 
signal done: boolean;
signal test1, test2, test3, test4, test5: boolean;
begin
	--State Transition Process
	process is
	variable curr_state: state := S7;
	begin
		if clk = '1' then
			case curr_state is
				when WT =>
					if mpy = '1' then curr_state := S1;
					end if;
				when S1 =>
					if test1 = true then curr_state := S6;
					elsif test2 = true then curr_state := S2;
					elsif test3 = true then curr_state := S3;
					elsif test4 = true then curr_state := S4;
					elsif test5 = true then curr_state := S5;
					end if;
				when S2 =>
					curr_state := S6;
				when S3 =>                 
					curr_state := S6;
				when S4 =>                 
					curr_state := S6;        
				when S5 =>
					curr_state := S6;
				when S6 =>
					if done then curr_state := S7;
					else curr_state := S1;
					end if;
				when S7 =>
					if mpy = '0' then curr_state := WT;
					end if;	
			end case;
		end if;
		new_state <= curr_state;
		wait on clk;
	end process;
	
	--Asserted Output Process
	process is
	variable P_val: std_logic_vector(17 downto 0);
	variable M: std_logic_vector(8 downto 0);
	variable NegM: std_logic_vector(8 downto 0);
	variable rdy_val: std_logic;
	variable I: std_logic_vector(2 downto 0);
	variable done_val, t1_val, t2_val, t3_val, t4_val, t5_val: boolean;
	begin	
	rdy_val := '0';	

		case new_state is
			when WT =>
				P_val(17 downto 9) := "000000000";
				P_val(8 downto 1) := a;
				P_val(0) := '0';
				
				if b(7) = '0' then
					M:= '0' & b;
				else
					M:= '1' & b;
				end if;
				NegM := not (M) + 1;
				
				if a(7) = '1' and b(7) = '1' then
					
					M:= negM;
				end if;
				
				I := "000";
				prod <= "XXXXXXXXXXXXXXXX";
				rdy_val := '1';
				
			when S1 =>
				I := I + "001";
				if I = "100" then
					done_val := true;
				else
					done_val := false;
				end if;
				
				t1_val := (P_val(2 downto 0) = "000") or (P_val(2 downto 0) = "111");
				t2_val := (P_val(2 downto 0) = "001") or (P_val(2 downto 0) = "010");
				t3_val := (P_val(2 downto 0) = "011");
				t4_val := (P_val(2 downto 0) = "100");
				t5_val := (P_val(2 downto 0) = "101") or (P_val(2 downto 0) = "110");
				
				
			when S2 =>
				P_val(17 downto 9) := P_val(17 downto 9) + M(8 downto 0);
			when S3 =>
				P_val(17 downto 9) := P_val(17 downto 9) + (M(8 downto 0) sll 1);
			when S4 =>
				P_val(17 downto 9) := P_val(17 downto 9) + (NegM(8 downto 0) sll 1);
			when S5 =>
				P_val(17 downto 9) := P_val(17 downto 9) + NegM(8 downto 0);
			when S6 =>
				P_val := P_val sra 2;
			when S7 =>
				prod <= P_val(16 downto 1);
				rdy_val := '1';
		end case;
	
		rdy <= rdy_val;
		done <= done_val;
	
		test1 <= t1_val;
		test2 <= t2_val;
		test3 <= t3_val;
		test4 <= t4_val;
		test5 <= t5_val;
		
		wait on new_state;
	end process;
end behav;